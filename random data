CREATE TABLE books
(
		book_id INT NOT NULL AUTO_INCREMENT,
		title VARCHAR(100),
		author_fname VARCHAR(100),
		author_lname VARCHAR(100),
		released_year INT,
		stock_quantity INT,
		pages INT,
		PRIMARY KEY(book_id)
	);


INSERT INTO books (title, author_fname, author_lname, released_year, stock_quantity, pages)
VALUES
('The Namesake', 'Jhumpa', 'Lahiri', 2003, 32, 291),
('Norse Mythology', 'Neil', 'Gaiman',2016, 43, 304),
('American Gods', 'Neil', 'Gaiman', 2001, 12, 465),
('Interpreter of Maladies', 'Jhumpa', 'Lahiri', 1996, 97, 198),
('A Hologram for the King: A Novel', 'Dave', 'Eggers', 2012, 154, 352),
('The Circle', 'Dave', 'Eggers', 2013, 26, 504),
('The Amazing Adventures of Kavalier & Clay', 'Michael', 'Chabon', 2000, 68, 634),
('Just Kids', 'Patti', 'Smith', 2010, 55, 304),
('A Heartbreaking Work of Staggering Genius', 'Dave', 'Eggers', 2001, 104, 437),
('Coraline', 'Neil', 'Gaiman', 2003, 100, 208),
('What We Talk About When We Talk About Love: Stories', 'Raymond', 'Carver', 1981, 23, 176),
("Where I'm Calling From: Selected Stories", 'Raymond', 'Carver', 1989, 12, 526),
('White Noise', 'Don', 'DeLillo', 1985, 49, 320),
('Cannery Row', 'John', 'Steinbeck', 1945, 95, 181),
('Oblivion: Stories', 'David', 'Foster Wallace', 2004, 172, 329),
('Consider the Lobster', 'David', 'Foster Wallace', 2005, 92, 343);

SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;



SELECT
    SUBSTRING(REPLACE(title, 'e', '3'), 1, 10) AS 'weird string'
FROM books;



SELECT
CONCAT(SUBSTRING(title, 1, 10), '...') AS 'short title',
CONCAT(author_lname, ',', author_fname) AS 'author',
CONCAT(stock_quantity, ' in stock') AS 'quantity'
FROM books2;

DELETE FROM books2 
WHERE book_id IN (18, 19, 20);


SELECT CONCAT ('In ', released_year, ' ', COUNT(*), ' books(s) released') AS year FROM books2
GROUP BY released_year;


SELECT title, pages FROM books2 
WHERE pages=(SELECT MAX(pages) FROM books2);


SELECT 
CONCAT (author_fname, ' ', author_lname) AS Author,
		MAX(pages) AS 'Longest Book'
    FROM books2
    GROUP BY author_lname, author_fname;
    
    
SELECT author_fname, author_lname, AVG(pages) FROM books2
GROUP BY author_lname, author_fname;



CREATE TABLE people (name VARCHAR(100), birthdate DATE, birthtime TIME, birthdt DATETIME);
INSERT INTO people (name, birthdate, birthtime, birthdt)
		VALUES	('Padma', '1983-11-11', '10:07:35', '1983-11-11 10:07:35'),
        		('Larry', '1984-08-06', '12:09:00', '1984-08-06 12:09:00 ');



			
SELECT DATE_FORMAT(birthdt, 'Was born on a %W') FROM people;
 
SELECT DATE_FORMAT(birthdt, '%m/%d/%Y') FROM people;
 
SELECT DATE_FORMAT(birthdt, '%m/%d/%Y at %h:%i') FROM people;	



SELECT birthdt, DATE_ADD(birthdt, INTERVAL 1 MONTH) FROM people;
SELECT birthdt, birthdt + INTERVAL 15 MONTH + INTERVAL 10 HOUR FROM people;


CREATE TABLE comments (
    content VARCHAR(100),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE comments2 (
    content VARCHAR(100),
    changed_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP
);




SELECT title, author_lname, released_year FROM books2
WHERE author_lname='Eggers'
AND released_year > 2010;




SELECT title, released_year FROM books2 
WHERE released_year BETWEEN 2004 AND 2015;



SELECT 
    name, 
    birthdt 
FROM people
WHERE 
    birthdt BETWEEN CAST('1980-01-01' AS DATETIME)
    AND CAST('2000-01-01' AS DATETIME);
    
    
    SELECT title, author_lname FROM books2
WHERE author_lname IN ('Carver', 'Lahiri', 'Smith');



SELECT title, released_year,
CASE
WHEN released_year >= 2000 THEN 'Modern Lit'
ELSE '20th Century Lit'
END AS GENRE
FROM books2;

SELECT title, stock_quantity,
CASE 
WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
ELSE '***'
END AS STOCK
FROM books2;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE TABLE customers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)

INSERT INTO customers (first_name, last_name, email) 
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');
       
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016/02/10', 99.99, 1),
       ('2017/11/11', 35.50, 1),
       ('2014/12/12', 800.67, 2),
       ('2015/01/03', 12.50, 2),
       ('1999/04/11', 450.25, 5);


--IMPLICIT INNER JOIN-----

SELECT first_name, last_name, order_date, amount
FROM customers, orders 
WHERE customers.id = orders.customer_id;

----- EXPLICIT INNER JOIN ----

SELECT first_name, last_name, order_date, amount 
FROM customers
JOIN orders
	ON customers.id = orders.id;
	
	
-----LEFT JOIN-----	
	
SELECT 
first_name, 
last_name, 
IFNULL(SUM(amount), 0) AS total_spent
FROM customers
LEFT JOIN orders
ON customers.id = orders.customer_id 
GROUP BY customers.id
ORDER BY total_spent;	

----DELETE CASCADE---

CREATE TABLE customers(
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100)
);
 
CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) 
        REFERENCES customers(id)
        ON DELETE CASCADE
);
////////////////////////////////////////////////////// NEW_PROJECT_MANY_TO_MANY_TV_SHOW_STUFF//////////////////////////////

CREATE TABLE reviewers (
 	id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR (50) NOT NULL,
    last_name VARCHAR(50 ) NOT NULL
);

CREATE TABLE series (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(100),
    released_year YEAR,
    genre VARCHAR(100)
);

     
    CREATE TABLE reviews (
    id INT PRIMARY KEY AUTO_INCREMENT,
    rating DECIMAL(2 , 1 ),
    series_id INT,
    reviewer_id INT,
    FOREIGN KEY (series_id)
        REFERENCES series (id),
    FOREIGN KEY (reviewer_id)
        REFERENCES reviewers (id)
);



INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');
    
    
    
 INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');
    
    
    
INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);


-----Avg rating of reviews for each show ------

SELECT title, 
	AVG(rating) AS avg_rating
FROM series
	JOIN reviews
    ON series.id = reviews.series_id
    GROUP BY title
    ORDER BY avg_rating;
    
-------Looking for all reviews submitted by reviewers--------

SELECT first_name,
		last_name,
        rating
FROM reviewers 
    JOIN reviews 
    ON reviewers.id = reviews.reviewer_id;
    
    
----------Looking for all series with no reviews-----------
  
  SELECT title AS unreviewed_series 
FROM series
LEFT JOIN reviews
ON series.id = reviews.series_id
   WHERE rating is NULL;


--------Looking for avg rating per genre---------
SELECT genre,
 		AVG(rating) AS avg_rating
    FROM series
    JOIN reviews
    ON series.id = reviews.series_id
    GROUP BY genre;
    
 -----------Looking for min/max/avg/countof reviews per reviewers and flagging inactive users---------
 
 SELECT first_name,
		last_name,
        IFNULL(AVG(rating),0) AS avg,
      	IFNULL(MAX(rating), 0) AS Max,
        IFNULL(MIN(rating),0) As 'MIN',
        COUNT(rating) AS 'count',
      	IF (Count(rating) > 0, 'Active', 'Inactive') AS Status
FROM reviewers
       LEFT JOIN reviews
        ON reviewers.id = reviews.reviewer_id
        GROUP BY first_name, last_name;
	
--------------------------------using all tables/2joins------------------------------

SELECT  title,
    	rating,
        CONCAT (first_name, " ", last_name) AS reviewer
FROM reviewers
        JOIN reviews
        ON reviewers.id = reviews.reviewer_id
        JOIN series
        ON reviews.series_id = series.id;
