#A function is a reusable block of code which performs operations specified in the function. They let you break down tasks and allow you to reuse your code in different programs.

  There are two types of functions :

  Pre-defined functions
  User defined functions

#You can define functions to provide the required functionality. Here are simple rules to define a function in Python:

  Functions blocks begin def followed by the function name and parentheses ().
  There are input parameters or arguments that should be placed within these parentheses.
  You can also define parameters inside these parentheses.
  There is a body within every function that starts with a colon (:) and is indented.
  You can also place documentation before the body.
  The statement return exits a function, optionally passing back a value.
 -------------------------------------------------------------------------------------------------------------------------------------------------------------
 # Define a function for multiple two numbers
def Mult(a, b):
    c = a * b
    return(c)
    print('This is not printed')
    
result = Mult(12,2)
print(result) : 24

# Use mult() multiply two different type values together
Mult(2, "Michael Jackson ") : 'Michael Jackson Michael Jackson '

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Variables
#The input to a function is called a formal parameter.
#A variable that is declared inside a function is called a local variable. The parameter only exists within the function (i.e. the point where the function starts and stops).
#A variable that is declared outside a function definition is a global variable, and its value is accessible and modifiable throughout the program

--------------------------------------------------------------------------------------------------------------------------------------------------------------

EXCEPTION HANDLING
An exception is an error that occurs during the execution of code. This error causes the code to raise an exception and if not prepared to handle it will halt the execution of the code.

Example Errors
ZeroDivisionError - occurs when you try to divide by 0
NameError - means that you tried to use the variable a when it was not defined.
IndexError - you tried to access data from a list using an index that does not exist for this list
https://docs.python.org/3/library/exceptions.html - list of all exceptions built into Python

Try Except
A try except will allow you to execute code that might raise an exception and in the case of any exception or a specific one we can handle or catch the exception and execute specific code. This will allow us to continue the execution of our program even if there is an exception.
  Python tries to execute the code in the try block. In this case if there is any exception raised by the code in the try block, it will be caught and the code block in the except block will be executed. After that, the code that comes after the try except will be executed.
  
  # potential code before try catch
try:
    # code to try to execute
except:
    # code to execute if there is an exception
# code that will still execute if there is an exception
---------------------------------------------------------------------------------------------------------------------------------------------------------
a = 1
try:
    b = int(input("Please enter a number to divide a"))
    a = a/b
    print("Success a=",a)
except:
    print("There was an error")
#An exception will only be raised if b is zero.


EXAMPLE of SPECIFIC EXCEPTION RULE
# potential code before try catch
try:
    # code to try to execute
except ZeroDivisionError:
    # code to execute if there is a ZeroDivisionError
except NameError:
    # code to execute if there is a NameError  
# code that will execute if there is no exception or a one that we are handling

Try Except Specific Example
a = 1
try:
    b = int(input("Please enter a number to divide a"))
    a = a/b
    print("Success a=",a)
except ZeroDivisionError:
    print("The number you provided cant divide 1 because it is 0")
except ValueError:
    print("You did not provide a number")
except:
    print("Something went wrong")
        
------------------------------------------------------------------------------------------------------------------------------------------------------        
 Try Except Else and Finally
 #else allows one to check if there was no exception when executing the try block. This is useful when we want to execute something only if there were no errors.
 # potential code before try catch
try:
    # code to try to execute
except ZeroDivisionError:
    # code to execute if there is a ZeroDivisionError
except NameError:
    # code to execute if there is a NameError
except:
    # code to execute if ther is any exception
else:
    # code to execute if there is no exception   
# code that will execute if there is no exception or a one that we are handling
 
 #finally allows us to always execute something even if there is an exception or not. This is usually used to signify the end of the try except.
 
 
 # potential code before try catch
try:
    # code to try to execute
except ZeroDivisionError:
    # code to execute if there is a ZeroDivisionError
except NameError:
    # code to execute if there is a NameError
except:
    # code to execute if ther is any exception
else:
    # code to execute if there is no exception
finally:
    # code to execute at the end of the try except no matter what
# code that will execute if there is no exception or a one that we are handling

Try Except Else and Finally Example
a = 1
try:
    b = int(input("Please enter a number to divide a"))
    a = a/b
except ZeroDivisionError:
    print("The number you provided cant divide 1 because it is 0")
except ValueError:
    print("You did not provide a number")
except:
    print("Something went wrong")
else:
    print("success a=",a)
finally:
    print("Processing Complete")

