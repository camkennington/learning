#Pandas is a popular library for data analysis built on top of the Python programming language. Pandas generally provide two data structures for manipulating data, They are:
 - DataFrame
 - Series
 
 DataFrame - 2 dimensional data structure, data is aligned in a tabbular fashion in rows and columns
    - Pandas DataFrame will be created by loading the datasets from existing storage
    - Storage can be SQL Database, CSV File, Excel File, etc. 
 Series represents a one-dimensional array of indexed data. Two main components:
    - an array of actual data
    -an associated array of indexes or data labels
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#import Pandas library
import pandas as pd

Creating a Dataframe out of a Dictionary

#Define a dictionary 'x'
x = {'Name': ['Rose','John', 'Jane', 'Mary'], 'ID': [1, 2, 3, 4], 'Department': ['Architect Group', 'Software Group', 'Design Team', 'Infrastructure'], 
      'Salary':[100000, 80000, 50000, 60000]}

#casting the dictionary to a DataFrame
df = pd.DataFrame(x)

#display the result df
df

Result
	Name	ID	Department	  Salary
0	Rose	1	Architect Group	100000
1	John	2	Software Group	80000
2	Jane	3	Design Team	     50000
3	Mary	4	Infrastructure	60000

Column Selection:
#Retrieving the "ID" column and assigning it to a variable x
x = df[['ID']]
x

Using the Type Function to Check the Type of Variable:
#check the type of x
type(x) = pandas.core.frame.DataFrame

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Create a DataFrame to display the table with students, age, country, course and marks:
	Student	Age	Country	Course	          Marks
0	David	  27	UK	    Python	           85
1	Samuel	24	Canada	Data Structures	   72
2	Terry	  22	China	  Machine Learning	 89
3	Evan	  32	USA	    Web Development	   76


a = {'Student':['David', 'Samuel', 'Terry', 'Evan'],
     'Age':['27', '24', '22', '32'],
     'Country':['UK', 'Canada', 'China', 'USA'],
     'Course':['Python','Data Structures','Machine Learning','Web Development'],
     'Marks':['85','72','89','76']}
df1 = pd.DataFrame(a)
df1

Retrieve the Marks column and assign it to a varibale b:
b =df1 [['Marks']]

Retrieve Country and Course columns and assign it to a variable c:
c = df1[['Country','Course']]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
To view the column as a series, just use 1 bracket
# Get the Student column as a series Object
x = df1['Student']
x

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LOC() AND ILOC() FUNCTIONS:

loc() is a label-based data selecting method which means that we have to pass the name of the row or column that we want to select. 
This method includes the last element of the range passed in it.
	- Syntax = loc[row_label, column_label]

iloc() is an indexed-based selecting method which means that we have to pass integer index in the method to select a specific row/column.
This method does not include the last element of the range passed in it.
	- Syntax = iloc[row_index, column_index]



# Access the value on the first row and the first column:
df.iloc[0, 0]

# Access the value on the first row and the third column:
df.iloc[0,2]

# Access the column using the name
df.loc[0, 'Salary']

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#how would you perform the dot product between the numpy arrays u and v?
np.dot(u,v)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Create a python list as follows:
a = ["0", 1, "two", "3", 4]

# Print each element
print("a[0]:", a[0])
print("a[1]:", a[1])
print("a[2]:", a[2])
print("a[3]:", a[3])
print("a[4]:", a[4])

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#NumPy is a Python library used for working with arrays, linear algebra, fourier transform, and matrices.
#A numpy array is similar to a list. NumPy stands for Numerical Python and it is an open source project.
#The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

#import numpy library
import numpy as np 

#Create a numpy array
a = np.array([0, 1, 2, 3, 4])

#Check the type of the array
type(a)

#Check the type of the array
type(a)

#Assign the first element to 100
c[0] = 100

# Assign the 5th element to 0
c[4] = 0

SLICING:
#Like lists, we can slice the numpy array. Slicing in python means taking the elements from the given index to another given index.

#We can select the elements from 1 to 3 and assign it to a new numpy array d as follows:
# Slicing the numpy array
d = c[1:4]

# Set the fourth element and fifth element to 300 and 400
c[3:5] = 300, 400

# Print the even elements in the given array
arr = np.array([1, 2, 3, 4, 5, 6, 7])
print(arr[1:5:2])


ASSIGNING VALUES WITH LIST:

#Create the index list
select = [0, 2, 3, 4]

#Use List to select elements
d = c[select]

#Assign the specified elements to new value
c[select] = 100000

#Create a numpy array
a = np.array([0, 1, 2, 3, 4])

#Get the size of numpy array
a.size

#Get the number of dimensions of numpy array
a.ndim

#Get the shape/size of numpy array
a.shape


NUMPY STATISTICAL FUNCTIONS:

# Create a numpy array
a = np.array([1, -1, 1, -1])

# Get the mean of numpy array
mean = a.mean()

# Get the standard deviation of numpy array
standard_deviation=a.std()

# Get the biggest value in the numpy array
max_b = b.max()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2D NUMPY

#import libraries
import numpy as np 
import matplotlib.pyplot as plt

#create a list
a = [[11, 12, 13], [21, 22, 23], [31, 32, 33]]

# Convert list to Numpy Array
# Every element is the same type
A = np.array(a)

#show the numpy array dimesnions
A.ndim

#show the numpy array size
A.size
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ACCESSING DIFFERENT ELEMENTS OF A NUMPY ARRAY

#We can use rectangular brackets to access the different elements of the array. The correspondence between the rectangular brackets and the list and the rectangular representation is shown below:

_________________________
| A[0,0]  A[0,1]   A[0,2]
| A[1,0]  A[1,1]   A[1,2]
| A[2,0]  A[2,1]   A[2,2]
|________________________
 
# Access the element on the second row and third column
A[1, 2]

# Access the element on the second row and third column
A[1][2]

# Access the element on the first row and first column
A[0][0]

# Access the element on the first row and first and second columns
A[0][0:2]

# Access the element on the first and second rows and third column
A[0:2, 2]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BASIC OPERATIONS

We can also add arrays. Process is identical to matrix addition

# Create a numpy array X
X = np.array([[1, 0], [0, 1]]) 

# Create a numpy array Y
Y = np.array([[2, 1], [1, 2]]) 

# Add X and Y
Z = X + Y  = ([[3, 1], [1, 3]])


# Create a numpy array Y
Y = np.array([[2, 1], [1, 2]]) 

# Multiply Y with 2
Z = 2 * Y =   ([[4, 2], [2, 4]])


# Create a numpy array Y
Y = np.array([[2, 1], [1, 2]]) 

# Create a numpy array X
X = np.array([[1, 0], [0, 1]])

# Multiply X with Y
Z = X * Y  =  ([[2, 0],[0, 2]])

MATRIX MULTIPLICATION





