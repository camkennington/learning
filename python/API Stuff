# 
def one_dict(list_dict):
    keys=list_dict[0].keys()
    out_dict={key:[] for key in keys}
    for dict_ in list_dict:
        for key, value in dict_.items():
            out_dict[key].append(value)
    return out_dict    
    
#import pandas and matplotlib
import pandas as pd
import matplotlib.pyplot as plt

#create a dictionary
 dict_={'a':[11,21,31],'b':[12,22,32]}
 
#When you create a Pandas object with the dataframe constructor, in API lingo this is an "instance". The data in the dictionary is passed along to the pandas API. You then use the dataframe to communicate with the API. 

df=pd.DataFrame(dict_)
type(df)

#When you call the method head the dataframe communicates with the API displaying the first few rows of the dataframe.
df.head()

#When you call the method mean, the API will calculate the mean and return the value.
df.mean()

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
REST APIs

#Rest API's function by sending a request, the request is communicated via HTTP message. The HTTP message usually contains a JSON file. This contains instructions for what operation we would like the service or resource to perform. In a similar manner, API returns a response, via an HTTP message, this response is usually contained within a JSON.

#install NBA API
!pip install nba_api

from nba_api.stats.static import teams
import matplotlib.pyplot as plt

#The method get_teams() returns a list of dictionaries.
nba_teams = teams.get_teams()

#The dictionary key id has a unique identifier for each team as a value. Let's look at the first three elements of the list:
nba_teams[0:3]
=
[{'id': 1610612737,
  'full_name': 'Atlanta Hawks',
  'abbreviation': 'ATL',
  'nickname': 'Hawks',
  'city': 'Atlanta',
  'state': 'Atlanta',
  'year_founded': 1949},
 {'id': 1610612738,
  'full_name': 'Boston Celtics',
  'abbreviation': 'BOS',
  'nickname': 'Celtics',
  'city': 'Boston',
  'state': 'Massachusetts',
  'year_founded': 1946},
 {'id': 1610612739,
  'full_name': 'Cleveland Cavaliers',
  'abbreviation': 'CLE',
  'nickname': 'Cavaliers',
  'city': 'Cleveland',
  'state': 'Ohio',
  'year_founded': 1970}]
  
# convert dictionary to table
dict_nba_team=one_dict(nba_teams)
df_teams=pd.DataFrame(dict_nba_team)
df_teams.head()

#Will use the team's nickname to find the unique id, we can see the row that contains the warriors by using the column nickname as follows:
df_warriors=df_teams[df_teams['nickname']=='Warriors']
df_warriors

#we can use the following line of code to access the first column of the dataframe:
id_warriors=df_warriors[['id']].values[0][0]
# we now have an integer that can be used to request the Warriors information 
id_warriors

#The function "League Game Finder " will make an API call, it's in the module stats.endpoints
from nba_api.stats.endpoints import leaguegamefinder

#The parameter team_id_nullable is the unique ID for the warriors. Under the hood, the NBA API is making a HTTP request.
#The information requested is provided and is transmitted via an HTTP response this is assigned to the object game finder.

#you can download the dataframe from the API call for Golden State and run the rest like a video.
import requests

filename = "https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%205/Labs/Golden_State.pkl"

def download(url, filename):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, "wb") as f:
            f.write(response.content)

download(filename, "Golden_State.pkl")

file_name = "Golden_State.pkl"
games = pd.read_pickle(file_name)
games.head()

#We can create two dataframes, one for the games that the Warriors faced the raptors at home, and the second for away games.
games_home=games [games ['MATCHUP']=='GSW vs. TOR']
games_away=games [games ['MATCHUP']=='GSW @ TOR']

#Calculate the mean for the column PTS for the dataframes games_home and  games_away:
games_home.mean()['PTS']
games_away.mean()['PTS']

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTTP AND REQUESTS

#Requests is a Python Library that allows you to send <code>HTTP/1.1</code> requests easily. We can import the library as follows:
import requests

#Also import the below libraries:
import os 
from PIL import Image
from IPython.display import IFrame

#You can make a GET request via the method get to www.ibm.com:
url='https://www.ibm.com/'
r=requests.get(url)

#We have the response object r, this has information about the request, like the status of the request. We can view the status code using the attribute status_code:
r.status_code

#You can view the request headers:
print(r.request.headers)

#You can view the request body, in the following line, as there is no body for a get request we get a None:
header=r.headers
print(r.headers)

#We can obtain the date the request was sent using the key Date.
header['date']

#Content-Type indicates the type of data:
header['Content-Type']

#You can also check the encoding:
 r.encoding
 
#As the Content-Type is text/html we can use the attribute text to display the HTML in the body. We can review the first 100 characters: 
r.text[0:100]

#You can load other types of data for non-text requests, like images. Consider the URL of the following image:
# Use single quotation marks for defining string
url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/IDSNlogo.png'

#We can make a get request:
r=requests.get(url)

#An image is a response object that contains the image as a bytes-like object. As a result, we must save it using a file object. First, we specify the file path and name
path=os.path.join(os.getcwd(),'image.png')
path

#We save the file, in order to access the body of the response we use the attribute content then save it using the open function and write method:
with open(path,'wb') as f:
    f.write(r.content)

#We can view the image:
Image.open(path)  

#In the previous section, we used the wget function to retrieve content from the web server as shown below. Write the python code to perform the same task. The code should be the same as the one used to download the image, but the file name should be 'Example1.txt'.
url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/data/Example1.txt'
path=os.path.join(os.getcwd(),'example1.txt')
r=requests.get(url)
with open(path,'wb') as f:
    f.write(r.content)
    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GET REQUEST with URL PARAMETERS:

#You can use the GET method to modify the results of your query, for example retrieving data from an API. We send a GET request to the server. Like before we have the Base URL, in the Route we append /get, this indicates we would like to preform a GET request.

#The Base URL is for http://httpbin.org/ is a simple HTTP Request & Response Service. The URL in Python is given by:
url_get='http://httpbin.org/get'

#A query string is a part of a uniform resource locator (URL), this sends other information to the web server. The start of the query is a ?, followed by a series of parameter and value pairs, as shown in the table below. The first parameter name is name and the value is Joseph. The second parameter name is ID and the Value is 123. Each pair, parameter, and value is separated by an equals sign, =. The series of pairs is separated by the ampersand &.

#To create a Query string, add a dictionary. The keys are the parameter names and the values are the value of the Query string:
payload={"name":"Joseph","ID":"123"}

#Then passing the dictionary payload to the params parameter of the  get() function:
r=requests.get(url_get,params=payload)

#We can print out the URL and see the name and values.
r.url

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
POST REQUESTS

#Like a GET request, a POST is used to send data to a server, but the POST request sends the data in a request body. In order to send the Post Request in Python, in the URL we change the route to POST:
url_post='http://httpbin.org/post'

#To make a POST request we use the post() function, the variable payload is passed to the parameter  data :
r_post=requests.post(url_post,data=payload)

#Comparing the URL from the response object of the GET and POST request we see the POST request has no name or value pairs.
print("POST request URL:",r_post.url )
print("GET request URL:",r.url)


















