# 
def one_dict(list_dict):
    keys=list_dict[0].keys()
    out_dict={key:[] for key in keys}
    for dict_ in list_dict:
        for key, value in dict_.items():
            out_dict[key].append(value)
    return out_dict    
    
#import pandas and matplotlib
import pandas as pd
import matplotlib.pyplot as plt

#create a dictionary
 dict_={'a':[11,21,31],'b':[12,22,32]}
 
#When you create a Pandas object with the dataframe constructor, in API lingo this is an "instance". The data in the dictionary is passed along to the pandas API. You then use the dataframe to communicate with the API. 

df=pd.DataFrame(dict_)
type(df)

#When you call the method head the dataframe communicates with the API displaying the first few rows of the dataframe.
df.head()

#When you call the method mean, the API will calculate the mean and return the value.
df.mean()

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
REST APIs

#Rest API's function by sending a request, the request is communicated via HTTP message. The HTTP message usually contains a JSON file. This contains instructions for what operation we would like the service or resource to perform. In a similar manner, API returns a response, via an HTTP message, this response is usually contained within a JSON.

#install NBA API
!pip install nba_api

from nba_api.stats.static import teams
import matplotlib.pyplot as plt

#The method get_teams() returns a list of dictionaries.
nba_teams = teams.get_teams()

#The dictionary key id has a unique identifier for each team as a value. Let's look at the first three elements of the list:
nba_teams[0:3]
=
[{'id': 1610612737,
  'full_name': 'Atlanta Hawks',
  'abbreviation': 'ATL',
  'nickname': 'Hawks',
  'city': 'Atlanta',
  'state': 'Atlanta',
  'year_founded': 1949},
 {'id': 1610612738,
  'full_name': 'Boston Celtics',
  'abbreviation': 'BOS',
  'nickname': 'Celtics',
  'city': 'Boston',
  'state': 'Massachusetts',
  'year_founded': 1946},
 {'id': 1610612739,
  'full_name': 'Cleveland Cavaliers',
  'abbreviation': 'CLE',
  'nickname': 'Cavaliers',
  'city': 'Cleveland',
  'state': 'Ohio',
  'year_founded': 1970}]
  
# convert dictionary to table
dict_nba_team=one_dict(nba_teams)
df_teams=pd.DataFrame(dict_nba_team)
df_teams.head()

#Will use the team's nickname to find the unique id, we can see the row that contains the warriors by using the column nickname as follows:
df_warriors=df_teams[df_teams['nickname']=='Warriors']
df_warriors

#we can use the following line of code to access the first column of the dataframe:
id_warriors=df_warriors[['id']].values[0][0]
# we now have an integer that can be used to request the Warriors information 
id_warriors

#The function "League Game Finder " will make an API call, it's in the module stats.endpoints
from nba_api.stats.endpoints import leaguegamefinder

#The parameter team_id_nullable is the unique ID for the warriors. Under the hood, the NBA API is making a HTTP request.
#The information requested is provided and is transmitted via an HTTP response this is assigned to the object game finder.

#you can download the dataframe from the API call for Golden State and run the rest like a video.
import requests

filename = "https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%205/Labs/Golden_State.pkl"

def download(url, filename):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, "wb") as f:
            f.write(response.content)

download(filename, "Golden_State.pkl")

file_name = "Golden_State.pkl"
games = pd.read_pickle(file_name)
games.head()

#We can create two dataframes, one for the games that the Warriors faced the raptors at home, and the second for away games.
games_home=games [games ['MATCHUP']=='GSW vs. TOR']
games_away=games [games ['MATCHUP']=='GSW @ TOR']

#Calculate the mean for the column PTS for the dataframes games_home and  games_away:
games_home.mean()['PTS']
games_away.mean()['PTS']

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTTP AND REQUESTS

#Requests is a Python Library that allows you to send <code>HTTP/1.1</code> requests easily. We can import the library as follows:
import requests

#Also import the below libraries:
import os 
from PIL import Image
from IPython.display import IFrame

#You can make a GET request via the method get to www.ibm.com:
url='https://www.ibm.com/'
r=requests.get(url)








