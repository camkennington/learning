CREATE TABLE student (
  id SERIAL,
  name VARCHAR(128),
  email VARCHAR(128) UNIQUE,
  PRIMARY(id)
  );
  
  CREATE TABLE course (
    id SERIAL,
    title VARCHAR(128) UNIQUE,
    PRIMARY KEY(id)
    );
    
   CREATE TABLE member (
        sudent_id INTEGER REFERENCES student(id) ON DELETE CASCADE,
        course_id INTEGER REFERENCES course(id) ON DELETE CASCADE,
        role INTEGER,
        PRIMARY KEY (student_id, course_id)
        );
        
        
        
    INSERT INTO student (name, email) VALUES ('Jane', 'jane@tsugi.org');
    INSERT INTO student (name, email) VALUES ('Ed', 'Ed@tsugi.org');
    INSERT INTO student (name, email) VALUES ('Sue', 'Sue@tsugi.org');
     
     
     INSERT INTO course (title) VALUES ('Python');
     INSERT INTO course (title) VALUES ('SQL');
     INSERT INTO course (title) VALUES ('PHP');
     
     --------------------------------------Inserting memberships -------------------------------
     
     INSERT INTO member (student_id, course_id, role) VALUES (1,1,1);
     INSERT INTO member (student_id, course_id, role) VALUES (2,1,1);
     INSERT INTO member (student_id, course_id, role) VALUES (3,1,1);
     
     INSERT INTO member (student_id, course_id, role) VALUES (1,2,0);
     INSERT INTO member (student_id, course_id, role) VALUES (2,2,1);
        
     INSERT INTO member (student_id, course_id, role) VALUES (2,3,1);
     INSERT INTO member (student_id, course_id, role) VALUES (3,3,0);
     
     #role=1 for teacher, 0 for student


SELECT student.name, member.role, course.title
FROM student
JOIN members ON member.student_id = student.id
JOIN course ON member.course_id =course.id
ORDER BY course.title, member.role DESC, student.name;

#Output

name|  role  | title
-----------------------
ed  |  1    |  PHP
SUE |  0    |  PHP
JANE|  1    | PYTHON
ED  |  0    | PYTHON
SUE |  0    | PYTHON
ED  |  1    |  SQL
JANE|  0    |  SQL
